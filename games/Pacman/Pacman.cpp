/*
** Pacman.cpp for Rendu in /home/cauvin_m/Rendu/cpp_arcade/games/Pacman
**
** Made by cauvin-m
** Login   <cauvin_m@epitech.net>
**
** Started on  Mon Mar 27 11:51:48 2017 cauvin-m
** Last update Sun Apr 09 23:25:21 2017 cauvin-m
*/

#include "Pacman.hpp"

arcade::Pacman::Pacman()
{
  this->_score = 0;
  this->_turns = 0;
  this->_level = 0;
  this->_dir.clear();
  this->_dir.push_back(Pos(0, 0));
  this->_pos = Pos(0, 0);
  this->_map.clear();
  this->_gameSize = Pos(28, 32);

  this->loadMaps();

  this->_curPacgums = this->_pacgumsList[this->_level];
  this->_curMap = this->_map[this->_level];

}

void arcade::Pacman::loadMaps()
{
  this->_map[0] =
	  {
		  {0, {{0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 2}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}}},
		  {1, {{0, 2}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 1}, {20, 1}, {21, 1}, {22, 1}, {23, 1}, {24, 1}, {25, 1}, {26, 1}, {27, 2}}},
		  {2, {{0, 2}, {1, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 1}, {27, 2}}},
		  {3, {{0, 2}, {1, 4}, {2, 2}, {3, 0}, {4, 0}, {5, 2}, {6, 1}, {7, 2}, {8, 0}, {9, 0}, {10, 0}, {11, 2}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 2}, {17, 0}, {18, 0}, {19, 0}, {20, 2}, {21, 1}, {22, 2}, {23, 0}, {24, 0}, {25, 2}, {26, 4}, {27, 2}}},
		  {4, {{0, 2}, {1, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 1}, {27, 2}}},
		  {5, {{0, 2}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}, {13, 1}, {14, 1}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 1}, {20, 1}, {21, 1}, {22, 1}, {23, 1}, {24, 1}, {25, 1}, {26, 1}, {27, 2}}},
		  {6, {{0, 2}, {1, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 1}, {10, 2}, {11, 2}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 1}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 1}, {27, 2}}},
		  {7, {{0, 2}, {1, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 1}, {10, 2}, {11, 2}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 1}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 1}, {27, 2}}},
		  {8, {{0, 2}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 2}, {8, 2}, {9, 1}, {10, 1}, {11, 1}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 2}, {20, 2}, {21, 1}, {22, 1}, {23, 1}, {24, 1}, {25, 1}, {26, 1}, {27, 2}}},
		  {9, {{0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 0}, {13, 2}, {14, 2}, {15, 0}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}}},
		  {10, {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 0}, {13, 2}, {14, 2}, {15, 0}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 0}, {24, 0}, {25, 0}, {26, 0}, {27, 0}}},
		  {11, {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 0}, {11, 0}, {12, 0}, {13, 0}, {14, 0}, {15, 0}, {16, 0}, {17, 0}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 0}, {24, 0}, {25, 0}, {26, 0}, {27, 0}}},
		  {12, {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 2}, {11, 2}, {12, 2}, {13, 0}, {14, 0}, {15, 2}, {16, 2}, {17, 2}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 0}, {24, 0}, {25, 0}, {26, 0}, {27, 0}}},
		  {13, {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 2}, {11, 0}, {12, 0}, {13, 0}, {14, 0}, {15, 0}, {16, 0}, {17, 2}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 0}, {24, 0}, {25, 0}, {26, 0}, {27, 0}}},
		  {14, {{0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 2}, {11, 0}, {12, 5}, {13, 0}, {14, 0}, {15, 5}, {16, 0}, {17, 2}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}}},
		  {15, {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 1}, {7, 0}, {8, 0}, {9, 0}, {10, 2}, {11, 0}, {12, 0}, {13, 0}, {14, 0}, {15, 0}, {16, 0}, {17, 2}, {18, 0}, {19, 0}, {20, 0}, {21, 1}, {22, 0}, {23, 0}, {24, 0}, {25, 0}, {26, 0}, {27, 0}}},
		  {16, {{0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 2}, {11, 0}, {12, 5}, {13, 0}, {14, 0}, {15, 5}, {16, 0}, {17, 2}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}}},
		  {17, {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 2}, {11, 0}, {12, 0}, {13, 0}, {14, 0}, {15, 0}, {16, 0}, {17, 2}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 0}, {24, 0}, {25, 0}, {26, 0}, {27, 0}}},
		  {18, {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 2}, {11, 2}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 0}, {24, 0}, {25, 0}, {26, 0}, {27, 0}}},
		  {19, {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 0}, {11, 0}, {12, 0}, {13, 0}, {14, 0}, {15, 0}, {16, 0}, {17, 0}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 0}, {24, 0}, {25, 0}, {26, 0}, {27, 0}}},
		  {20, {{0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 0}, {10, 2}, {11, 2}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 0}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}}},
		  {21, {{0, 2}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 1}, {20, 1}, {21, 1}, {22, 1}, {23, 1}, {24, 1}, {25, 1}, {26, 1}, {27, 2}}},
		  {22, {{0, 2}, {1, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 1}, {27, 2}}},
		  {23, {{0, 2}, {1, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 1}, {27, 2}}},
		  {24, {{0, 2}, {1, 4}, {2, 1}, {3, 1}, {4, 2}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}, {13, 1}, {14, 1}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 1}, {20, 1}, {21, 1}, {22, 2}, {23, 2}, {24, 1}, {25, 1}, {26, 4}, {27, 2}}},
		  {25, {{0, 2}, {1, 2}, {2, 2}, {3, 1}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 1}, {10, 2}, {11, 2}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 1}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 1}, {25, 2}, {26, 2}, {27, 2}}},
		  {26, {{0, 2}, {1, 2}, {2, 2}, {3, 1}, {4, 2}, {5, 2}, {6, 1}, {7, 2}, {8, 2}, {9, 1}, {10, 2}, {11, 2}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 1}, {19, 2}, {20, 2}, {21, 1}, {22, 2}, {23, 2}, {24, 1}, {25, 2}, {26, 2}, {27, 2}}},
		  {27, {{0, 2}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 2}, {8, 2}, {9, 1}, {10, 1}, {11, 1}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 2}, {20, 2}, {21, 1}, {22, 1}, {23, 1}, {24, 1}, {25, 1}, {26, 1}, {27, 2}}},
		  {28, {{0, 2}, {1, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 2}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 1}, {27, 2}}},
		  {29, {{0, 2}, {1, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 1}, {13, 2}, {14, 2}, {15, 1}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 2}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 1}, {27, 2}}},
		  {30, {{0, 2}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}, {13, 1}, {14, 1}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 1}, {20, 1}, {21, 1}, {22, 1}, {23, 1}, {24, 1}, {25, 1}, {26, 1}, {27, 2}}},
		  {31, {{0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 2}, {21, 2}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}}}
	  };
  this->_pacgumsList[0] = 244;
  this->_pos = Pos(14, 19);
}

arcade::Pacman::~Pacman()
{

}

int arcade::Pacman::initGame(IGraphicLib *graphicLib, Score const &highScore)
{
  (void)highScore;
  graphicLib->addSprite("em_pacman_background.png", 0x000000, " ");
  graphicLib->addSprite("em_pacman_wall.png", 0xffffff, "x");
  graphicLib->addSprite("em_pacman_character.png", 0xf2e800, "c");
  graphicLib->addSprite("em_pacman_pacgum.png", 0xff0000, ".");
  graphicLib->addSprite("em_pacman_bigpacgum.png", 0xffffff, "O");
  return (0);
}


int arcade::Pacman::play()
{

  if (this->_pos.x + this->_dir[0].x >= 0 &&
      this->_pos.x + this->_dir[0].x < this->_curMap[this->_pos.y].size() &&
      this->_pos.y + this->_dir[0].y >= 0 &&
      this->_pos.y + this->_dir[0].y < this->_curMap.size() &&
      (this->_curMap[this->_pos.y + this->_dir[0].y][this->_pos.x + this->_dir[0].x] == 2 ||
       (this->_dir.size() == 2 &&
	       this->_curMap[this->_pos.y + this->_dir[0].y][this->_pos.x + this->_dir[0].x] != 2)
      ))
    {
      if (this->_dir.size() == 1)
	this->_dir[0] = Pos(0, 0);
      else
	{
	  this->_dir.erase(this->_dir.begin());
	  if (this->_curMap[this->_pos.y + this->_dir[0].y][this->_pos.x + this->_dir[0].x] == 2)
	    {
	      this->_dir[0] = Pos(0, 0);
	    }
	  else
	    {
	      this->_pos.x += this->_dir[0].x;
	      this->_pos.y += this->_dir[0].y;
	    }
	}
    }
  else
    {
      this->_pos.x += this->_dir[0].x;
      this->_pos.y += this->_dir[0].y;
    }
  if (this->_pos.y < 0)
    this->_pos.y = this->_curMap.size() - 1;
  else if (this->_pos.y >= this->_curMap.size())
    this->_pos.y = 0;
  if (this->_pos.x < 0)
    this->_pos.x = this->_curMap[this->_pos.y].size() - 1;
  else if (this->_pos.x >= this->_curMap[this->_pos.y].size())
    this->_pos.x = 0;
  if (this->_curMap[this->_pos.y][this->_pos.x] == 1)
    {
      this->_curMap[this->_pos.y][this->_pos.x] = 0;
      this->_curPacgums -= 1;
    }
  if (!this->_curPacgums)
    {
      this->_level += 1;
      if (this->_map.find(this->_level) == this->_map.end())
	this->_level = 0;
      this->_curMap = this->_map[this->_level];
      this->_curPacgums = this->_pacgumsList[this->_level];
    }

  this->_turns += 1;
  return (0);
}

int arcade::Pacman::actionOfEvent(EventKeyBoard const &event)
{
  Pos dir(0, 0);

  if (event == arcade::EventKeyBoard::EK_LEFT)
    dir.x = -1;
  else if (event == arcade::EventKeyBoard::EK_RIGHT)
    dir.x = 1;
  else if (event == arcade::EventKeyBoard::EK_UP)
    dir.y = -1;
  else if (event == arcade::EventKeyBoard::EK_DOWN)
    dir.y = 1;
  if ((!this->_dir[0].x && !this->_dir[0].y) || (dir.x && this->_dir[0].x) ||
      (dir.y && this->_dir[0].y))
    {
      this->_dir[0] = dir;
      if (((dir.x && this->_dir[0].x) || (dir.y && this->_dir[0].y)) && this->_dir.size() == 2)
	this->_dir.pop_back();
    }
  else if (this->_dir.size() < 2 && (dir.x != 0 || dir.y != 0))
    this->_dir.push_back(dir);
  else if (this->_dir.size() == 2 && (dir.x != 0 || dir.y != 0))
    this->_dir[1] = dir;
  return (0);
}

int arcade::Pacman::display(IGraphicLib *graphicLib)
{
  graphicLib->p_backGround("em_pacman_background.png");
  for (int i = 0; i < (int)this->_curMap.size(); i++)
    {
      for (int j = 0; j < (int)this->_curMap[i].size(); j++)
	{
	  if (this->_curMap[i][j] == 2)
	    graphicLib->p_cell(Pos(j, i), "em_pacman_wall.png", 0);
	  else if (this->_curMap[i][j] == 1)
	    graphicLib->p_cell(Pos(j, i), "em_pacman_pacgum.png", 0);
	  else
	    graphicLib->p_cell(Pos(this->_pos.x, this->_pos.y), "em_pacman_character.png", 0);
	}
    }
  return (0);
}

extern "C" arcade::Pacman *CObject()
{
  return (new arcade::Pacman);
}

extern "C" void DObject(arcade::Pacman *obj)
{
  delete obj;
}

/*
 * Protocol functions
 */

struct arcade::GetMap *arcade::Pacman::getMap()
{
  struct arcade::GetMap *map;

  if ((map = new arcade::GetMap[sizeof(arcade::GetMap) + (this->_curMap.size() * this->_curMap[0].size() * sizeof(arcade::TileType))]) == NULL)
    return NULL;
  map->type = arcade::CommandType::GET_MAP;
  map->height = this->_curMap.size();
  map->width = this->_curMap[0].size();
  for (int i = 0; i < map->height; i++)
    {
      for (int j = 0; j < map->width; j++)
	{
	  map->tile[(i * map->width) + j] = TileType::EMPTY;
	}
    }
  return map;
}

struct arcade::WhereAmI *arcade::Pacman::getPlayer()
{
  struct arcade::WhereAmI *player;

  if ((player = new arcade::WhereAmI[sizeof(arcade::WhereAmI) +
				     (1 * sizeof(arcade::Position))]) == NULL)
    return NULL;
  player->type = arcade::CommandType::WHERE_AM_I;
  player->lenght = 1;
  player->position[0].x = this->_pos.x;
  player->position[0].y = this->_pos.y;
  return player;
}

void arcade::Pacman::setDirectionPlayer(arcade::AProtocol::MoveDirection move)
{
  (void)move;
}

void arcade::Pacman::playProtocol()
{
  this->play();
}


// Protocol Play
extern "C" void Play(void)
{
  arcade::CommandType n;

  arcade::Pacman *game = new arcade::Pacman();
  while (std::cin.read(reinterpret_cast<char *>(&n), sizeof(n)))
    game->execAction(n);
  delete game;
};
